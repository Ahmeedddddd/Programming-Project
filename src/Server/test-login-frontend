// test-frontend-api.js - Test je frontend endpoints
const fetch = require('node-fetch'); // npm install node-fetch als je dit niet hebt

// Je server settings
const FRONTEND_SERVER = 'http://localhost:8383';
const BACKEND_SERVER = 'http://localhost:3301'; // Als je API server apart draait

const TEST_ACCOUNTS = [
  {
    userType: 'organisator',
    loginData: {
      userType: 'organisator',
      identifier: 'jan.devos@ehb.be',
      password: 'adminwachtwoord123'
    },
    expectedRoute: 'organisator-homepage.html'
  },
  {
    userType: 'bedrijf',
    loginData: {
      userType: 'bedrijf', 
      identifier: '84',
      password: 'bedrijfswachtwoord123'
    },
    expectedRoute: 'bedrijf-homepage.html'
  },
  {
    userType: 'student',
    loginData: {
      userType: 'student',
      identifier: '232', 
      password: 'studentwoord123'
    },
    expectedRoute: 'student-homepage.html'
  }
];

async function testEndpoint(url, options = {}) {
  try {
    console.log(`🔍 Testing: ${url}`);
    const response = await fetch(url, options);
    console.log(`   Status: ${response.status} ${response.statusText}`);
    
    if (response.ok) {
      const contentType = response.headers.get('content-type');
      if (contentType && contentType.includes('application/json')) {
        const data = await response.json();
        console.log(`   Response:`, data);
        return { success: true, data, status: response.status };
      } else {
        const text = await response.text();
        console.log(`   Response length: ${text.length} characters`);
        console.log(`   Content type: ${contentType}`);
        return { success: true, data: text, status: response.status };
      }
    } else {
      const errorText = await response.text();
      console.error(`   Error: ${errorText}`);
      return { success: false, error: errorText, status: response.status };
    }
  } catch (error) {
    console.error(`   Network Error: ${error.message}`);
    return { success: false, error: error.message };
  }
}

async function testBasicEndpoints() {
  console.log('🌐 Testing Basic Frontend Endpoints');
  console.log('===================================\n');
  
  // Test homepage (guest)
  await testEndpoint(`${FRONTEND_SERVER}/`);
  console.log('---\n');
  
  // Test user-info endpoint (guest)
  await testEndpoint(`${FRONTEND_SERVER}/api/user-info`);
  console.log('---\n');
  
  // Test role-manager script
  await testEndpoint(`${FRONTEND_SERVER}/js/role-manager.js`);
  console.log('---\n');
  
  // Test login page
  await testEndpoint(`${FRONTEND_SERVER}/login`);
  console.log('---\n');
}

async function testLoginFlow(account) {
  console.log(`\n🔐 Testing Login Flow: ${account.userType}`);
  console.log('=====================================');
  
  try {
    // Step 1: Login via API
    console.log('Step 1: Attempting login...');
    const loginResult = await testEndpoint(`${FRONTEND_SERVER}/api/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(account.loginData)
    });
    
    if (!loginResult.success) {
      console.error(`❌ Login failed for ${account.userType}`);
      return;
    }
    
    if (!loginResult.data.token) {
      console.error(`❌ No token received for ${account.userType}`);
      return;
    }
    
    console.log(`✅ Login successful, token received`);
    const token = loginResult.data.token;
    
    // Step 2: Test user-info with token
    console.log('Step 2: Testing user-info with token...');
    const userInfoResult = await testEndpoint(`${FRONTEND_SERVER}/api/user-info`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    if (userInfoResult.success) {
      console.log(`✅ User info: ${userInfoResult.data.userType} - ${userInfoResult.data.isLoggedIn}`);
    }
    
    // Step 3: Test role-based homepage
    console.log('Step 3: Testing role-based homepage...');
    const homepageResult = await testEndpoint(`${FRONTEND_SERVER}/`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    if (homepageResult.success) {
      const isCorrectHomepage = homepageResult.data.includes(account.expectedRoute) || 
                                homepageResult.data.includes(account.userType);
      console.log(`${isCorrectHomepage ? '✅' : '❌'} Homepage served correctly: ${account.expectedRoute}`);
    }
    
    return { token, userType: account.userType };
    
  } catch (error) {
    console.error(`❌ Login flow failed for ${account.userType}:`, error.message);
  }
}

async function runAllTests() {
  console.log('🚀 Starting Complete Frontend API Tests');
  console.log('=======================================\n');
  
  // Test basic endpoints
  await testBasicEndpoints();
  
  // Test login flows
  const tokens = {};
  for (const account of TEST_ACCOUNTS) {
    const result = await testLoginFlow(account);
    if (result) {
      tokens[result.userType] = result.token;
    }
  }
  
  // Summary
  console.log('\n📊 Test Summary');
  console.log('===============');
  console.log('Successful logins:');
  Object.keys(tokens).forEach(userType => {
    console.log(`✅ ${userType}: Token obtained`);
  });
  
  if (Object.keys(tokens).length === 0) {
    console.log('❌ No successful logins - check your auth endpoints');
  }
  
  return tokens;
}

// Run if called directly
if (require.main === module) {
  runAllTests().then(() => {
    console.log('\n🏁 All frontend tests completed');
    process.exit(0);
  }).catch(error => {
    console.error('Test runner failed:', error);
    process.exit(1);
  });
}

module.exports = { runAllTests, testLoginFlow, TEST_ACCOUNTS };